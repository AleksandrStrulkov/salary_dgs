import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import asyncio
from decimal import Decimal

from bot.states import SalaryInput

TOKEN = os.getenv("BOT_TOKEN")

logger = logging.getLogger(__name__)
logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# üü¢ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    try:
        await state.set_state(SalaryInput.base_salary)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –≤–∞—à—É –∑–∞—Ä–ø–ª–∞—Ç—É!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–∫–ª–∞–¥:")
        logging.info(f"–û–∫–ª–∞–¥ –∑–∞–¥–∞–Ω: {message.text} - {message.from_user.username} - {message.date}")
    except ValueError as error:
        await message.answer(f"–û—à–∏–±–∫–∞: {error}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–∫–ª–∞–¥–∞: {error} - {message.from_user.username} - {message.date}")


# üí∞ –°–±–æ—Ä: –æ–∫–ª–∞–¥
@dp.message(StateFilter(SalaryInput.base_salary))
async def input_base_salary(message: Message, state: FSMContext):
    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–∫–ª–∞–¥: ")
        await state.set_state(SalaryInput.base_salary)
        logging.info("–û–∫–ª–∞–¥ –∑–∞–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except ValueError as error:
        await message.answer(f"–û—à–∏–±–∫–∞: {error}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–∫–ª–∞–¥–∞: {error}")


# –°–±–æ—Ä: –º–µ—Å—è—Ü
@dp.message(StateFilter(SalaryInput.month))
async def input_month(message: Message, state: FSMContext):
    try:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü —Ä–∞—Å—á–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∏—é–Ω—å: ")
        await state.set_state(SalaryInput.month)
        logging.info("–ú–µ—Å—è—Ü –∑–∞–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except ValueError as error:
        await message.answer(f"–û—à–∏–±–∫–∞: {error}")
        logging.error(f"–û—à–∏–±–∫–∞: {error}")


# –°–±–æ—Ä: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
@dp.message(StateFilter(SalaryInput.sum_days))
async def input_sum_days(message: Message, state: FSMContext):
    pass


# –°–±–æ—Ä: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω
@dp.message(StateFilter(SalaryInput.night_shifts))
async def input_night_shifts(message: Message, state: FSMContext):
    pass


# –°–±–æ—Ä: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω
@dp.message(StateFilter(SalaryInput.evening_shifts))
async def input_evening_shifts(message: Message, state: FSMContext):
    pass


