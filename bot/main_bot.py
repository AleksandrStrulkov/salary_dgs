import asyncio
import os
import logging
from dotenv import load_dotenv

from aiogram import Router, F, Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State

from bot.inline_yes_button import show_full_result_kb
from bot.states import SalaryInput
from salary_dgs.models import BaseSalary, GetDataSalary
from salary_dgs.services import CalculationBaseSalary

router = Router()

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
                logging.FileHandler("bot.log", encoding="utf-8"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
                logging.StreamHandler(),  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
        ],
)

logger = logging.getLogger(__name__)


# üü¢ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_data({"salary": BaseSalary()})
    await state.set_state(SalaryInput.base_salary)
    await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ—Å—á–∏—Ç–∞—é –í–∞—à—É –∑–∞—Ä–ø–ª–∞—Ç—É!\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–∫–ª–∞–¥: "
    )
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}")
    logger.info(
            f"–í–≤–µ–¥–µ–Ω –æ–∫–ª–∞–¥ {message.text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.username}"
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
@router.message(StateFilter(SalaryInput.base_salary), F.text)
async def input_base_salary(message: Message, state: FSMContext):
    data = await state.get_data()
    salary: BaseSalary = data["salary"]
    try:
        salary.base_salary = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.month)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—á–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü: ")
        logger.info(
                f"–í–≤–µ–¥–µ–Ω –º–µ—Å—è—Ü {message.text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.username}"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞ {message.text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.username}"
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
@router.message(StateFilter(SalaryInput.month), F.text)
async def input_month(message: Message, state: FSMContext):
    data = await state.get_data()
    salary: BaseSalary = data["salary"]
    try:
        salary.month = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.sum_days)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Å–º–µ–Ω: ")
        logger.info(
                f"–í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π {message.text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞ {message.text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}"
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω
@router.message(StateFilter(SalaryInput.sum_days), F.text)
async def input_sum_days(message: Message, state: FSMContext):
    data = await state.get_data()
    salary: BaseSalary = data["salary"]
    try:
        salary.sum_days = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.night_shifts)
        await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω\n" "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ—Ç: "
        )
        logger.info(
                f"–í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω {message.text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω {message.text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}"
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–º–µ–Ω
@router.message(StateFilter(SalaryInput.night_shifts), F.text)
async def input_night_shifts(message: Message, state: FSMContext):
    data = await state.get_data()
    salary: BaseSalary = data["salary"]
    try:
        salary.night_shifts = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.evening_shifts)
        await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–º–µ–Ω\n" "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ—Ç: "
        )
        logger.info(
                f"–í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–º–µ–Ω {message.text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–º–µ–Ω {message.text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}"
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
@router.message(StateFilter(SalaryInput.evening_shifts), F.text)
async def input_evening_shifts(message: Message, state: FSMContext):
    data = await state.get_data()
    salary: BaseSalary = data["salary"]
    try:
        salary.evening_shifts = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.temperature_work)
        await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ —Å–≤—ã—à–µ +26 –≥—Ä–∞–¥—É—Å–æ–≤\n"
                "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ—Ç: "
        )
        logger.info(
                f"–í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ {message.text} "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ {message.text} "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username} - {e}"
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–∞–ª–æ–≥–æ–≤–æ–º—É –≤—ã—á–µ—Ç—É
@router.message(StateFilter(SalaryInput.temperature_work), F.text)
async def input_temperature_work(message: Message, state: FSMContext):
    data = await state.get_data()
    salary: BaseSalary = data["salary"]
    try:
        salary.temperature_work = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.children)
        await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ù–µ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ: 0\n"
                "–Ω–∞ 1-–≥–æ –∏ 2-–≥–æ: 1,2\n"
                "–Ω–∞ 2-–≥–æ –∏ 3-–≥–æ: 2,3, –∏ —Ç.–¥.\n\n"
                "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏:\n"
                "–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - 1400 ‚ÇΩ\n"
                "–Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - 1600 ‚ÇΩ\n"
                "–Ω–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - 6000 ‚ÇΩ\n"
                "–ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–µ–±–µ–Ω–æ–∫ —É–∂–µ –ø–æ–≤–∑—Ä–æ—Å–ª–µ–ª –∏ –Ω–∞ –Ω–µ–≥–æ –≤—ã—á–µ—Ç —É–∂–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è "
                "—Ç–æ –Ω–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ—Ç–µ–π —Å—É–º–º–∞ –≤—ã—á–µ—Ç–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è.\n"
                "–î–∞–Ω–Ω—ã–µ –≤—ã—á–µ—Ç—ã —Å—É–º–º–∏—Ä—É—é—Ç—Å—è, —Å—É–º–º–∞ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–ª–æ–≥–æ–º –≤ —Ä–∞–∑–º–µ—Ä–µ 13% "
                "–∏ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –≤–∞—à–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö."
        )
        logger.info(
                f"–í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –Ω–∞ –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç {message.text} "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username}"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –¥–æ—à–∫–æ–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ {message.text} "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username} - {e}"
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∞–ª–∏–º–µ–Ω—Ç–∞–º
@router.message(StateFilter(SalaryInput.children), F.text)
async def input_children(message: Message, state: FSMContext):
    data = await state.get_data()
    salary: BaseSalary = data["salary"]
    try:
        salary.children = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.alimony)
        await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –∞–ª–∏–º–µ–Ω—Ç–∞–º.\n"
                "–ù–µ—Ç –∞–ª–∏–º–µ–Ω—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ: 0\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:\n"
                "–û—Ç –æ–¥–Ω–æ–≥–æ –±—Ä–∞–∫–∞ –æ–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫: 25\n"
                "–û—Ç –æ–¥–Ω–æ–≥–æ –±—Ä–∞–∫–∞ –¥–≤–∞ —Ä–µ–±–µ–Ω–∫–∞: 33\n"
                "–û—Ç –æ–¥–Ω–æ–≥–æ –±—Ä–∞–∫–∞ —Ç—Ä–∏ —Ä–µ–±–µ–Ω–∫–∞ –∏ –±–æ–ª–µ–µ: 50\n"
                "–û—Ç —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞–∫–æ–≤: 25,25 –∏–ª–∏ 25,16 –∏–ª–∏ 33,25 –∏–ª–∏ 50,25"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∞–ª–∏–º–µ–Ω—Ç–æ–≤ {message.text} "
                f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username} - {e}"
        )


# –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
@router.message(StateFilter(SalaryInput.alimony), F.text)
async def input_alimony(message: Message, state: FSMContext):
    data = await state.get_data()
    salary: BaseSalary = data["salary"]

    try:
        salary.alimony = message.text
        await state.update_data(salary=salary)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ GetDataSalary
        get_salary = GetDataSalary(
                _base_salary=salary.base_salary,
                _month=salary.month,
                _sum_days=salary.sum_days,
                _night_shifts=salary.night_shifts,
                _evening_shifts=salary.evening_shifts,
                _temperature_work=salary.temperature_work,
                _children=salary.children,
                _alimony=salary.alimony,
        )

        # –ù–∞—á–∏—Å–ª–µ–Ω–æ
        calc = CalculationBaseSalary(get_salary)

        result_answer = await calc.calculation_answer()
        result_base_month = await calc.calculation_base_month()
        result_month_quarter = await calc.month_quarter_payment_calculation()

        await message.answer(f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {result_answer} ‚ÇΩ\n"
                            f"üëÜ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –í–∞–º –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—á–µ–Ω–æ: {result_base_month} ‚ÇΩ\n"
                            f"–≤ {result_month_quarter}.")
        await message.answer(
                f"–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—á–µ—Ç—É?\n",
                reply_markup=show_full_result_kb
        )

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await state.set_state(SalaryInput.show_full_result)

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(StateFilter(SalaryInput.show_full_result), F.data == "show_full_result")
async def show_full_result_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    salary: BaseSalary = data["salary"]

    get_salary = GetDataSalary(
        _base_salary=salary.base_salary,
        _month=salary.month,
        _sum_days=salary.sum_days,
        _night_shifts=salary.night_shifts,
        _evening_shifts=salary.evening_shifts,
        _temperature_work=salary.temperature_work,
        _children=salary.children,
        _alimony=salary.alimony,
    )

    calc = CalculationBaseSalary(get_salary)

    result_base_salary = await calc.calculation_base_salary()
    result_night_shifts = await calc.calculation_night_shifts()
    result_bonus = await calc.calculation_bonus()
    result_underground = await calc.calculation_underground()
    result_in_temperature = await calc.calculation_working_in_temperature()
    result_district_allowance = await calc.calculation_district_allowance()
    result_north_allowance = await calc.calculation_north_allowance()
    result_total_accruals = await calc.calculation_total_accruals()
    result_deduction_for_children = await calc.calculation_deduction_for_children()
    result_withholding_tax = await calc.calculation_withholding_tax()
    result_alimony = await calc.calculation_alimony()
    result_answer = await calc.calculation_answer()
    result_base_month = await calc.calculation_base_month()
    result_month_quarter = await calc.month_quarter_payment_calculation()

    await callback.message.answer(
        f"–ù–ê–ß–ò–°–õ–ï–ù–û:\n"
        f"–û–∫–ª–∞–¥ –∑–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {result_base_salary} ‚ÇΩ\n"
        f"–î–æ–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–±–æ—Ç—É –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {result_night_shifts} ‚ÇΩ\n"
        f"–ü—Ä–µ–º–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è: {result_bonus} ‚ÇΩ\n"
        f"–ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –≤—Ä–µ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞: {result_underground} ‚ÇΩ\n"
        f"–î–æ–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–±–æ—Ç—É –≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ —Å–≤—ã—à–µ +26–°: {result_in_temperature} ‚ÇΩ\n"
        f"–†–∞–π–æ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {result_district_allowance} ‚ÇΩ\n"
        f"–°–µ–≤–µ—Ä–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞: {result_north_allowance} ‚ÇΩ\n"
        f"–ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π: {result_deduction_for_children} ‚ÇΩ\n\n"
        f"‚úÖ –ò–¢–û–ì–û –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø: {result_total_accruals} ‚ÇΩ\n"
    )
    await callback.message.answer(
        f"–£–î–ï–†–ñ–ê–ù–û:\n"
        f"–ù–∞–ª–æ–≥ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π (–ù–î–§–õ): {result_withholding_tax} ‚ÇΩ\n"
        f"–ê–ª–∏–º–µ–Ω—Ç—ã: {result_alimony} ‚ÇΩ\n"
        f"‚úÖ –ò–¢–û–ì–û –ö –í–´–ü–õ–ê–¢–ï: {result_answer} ‚ÇΩ\n"
        f"üëÜ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –í–∞–º –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—á–µ–Ω–æ: {result_base_month} ‚ÇΩ\n"
        f"–≤ {result_month_quarter}."
    )

    await callback.answer()
    await state.clear()


async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
