import logging
from aiogram import Router, F, Bot, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State


from bot.keyboards import show_full_result_kb, main_menu_kb, main_menu_start, get_back_finish_kb, combined_keyboard
from bot.promt_for_state import prompt_for_state
from bot.states import SalaryInput
from salary_dgs.constant import EN_TO_RU_MONTHS
from \
    salary_dgs.models import BaseSalary, GetDataSalary
from salary_dgs.services import CalculationBaseSalary

router = Router()

logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
                logging.FileHandler("bot.log", encoding="utf-8"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
                logging.StreamHandler(),  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
        ],
)

logger = logging.getLogger(__name__)

step_sequence = [
        SalaryInput.base_salary,
        SalaryInput.month,
        SalaryInput.sum_days,
        SalaryInput.night_shifts,
        SalaryInput.evening_shifts,
        SalaryInput.temperature_work,
        SalaryInput.children,
        SalaryInput.alimony,
        SalaryInput.show_full_result,
]


def restore_salary(data: dict) -> BaseSalary:
    salary_data = data.get("salary")
    if isinstance(salary_data, BaseSalary):
        return salary_data
    return BaseSalary.from_dict(salary_data)


def get_previous_state(current_state: State) -> State | None:
    try:
        index = step_sequence.index(current_state)
        if index > 0:
            return step_sequence[index - 1]
    except ValueError:
        pass
    return None


# üü¢ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@router.callback_query(F.data == "start")
async def start_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_data({"salary": BaseSalary()})
    await state.set_state(SalaryInput.base_salary)
    await callback.message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –í–∞—à –æ–∫–ª–∞–¥:")

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    user = callback.from_user
    full_name = user.full_name
    logger.info(f"–í–≤–µ–¥–µ–Ω –æ–∫–ª–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - {full_name}")
    await callback.answer()


@router.callback_query(F.data == "stop")
async def stop_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚úÖ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_start)
    await callback.answer()


@router.callback_query(StateFilter(SalaryInput.show_full_result), F.data == "finish")
async def finish_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚úÖ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!")
    await callback.answer()
    await state.clear()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
@router.message(StateFilter(SalaryInput.base_salary), F.text)
async def input_base_salary(message: Message, state: FSMContext):
    data = await state.get_data()
    salary = restore_salary(await state.get_data())
    user = message.from_user
    full_name = user.full_name
    try:
        salary.base_salary = message.text
        await state.update_data(salary=salary.to_dict())
        await state.set_state(SalaryInput.month)
        await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—á–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü:", reply_markup=combined_keyboard)

        logger.info(f"–í–≤–µ–¥–µ–Ω –º–µ—Å—è—Ü {message.text} ({full_name})")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞ {message.text} - {e} - ({full_name})"
        )


@router.callback_query(StateFilter(SalaryInput.month), F.data.startswith("month_"))
async def select_month(callback: CallbackQuery, state: FSMContext):
    en_month = callback.data.replace("month_", "").lower()
    ru_month = EN_TO_RU_MONTHS.get(en_month)
    user = callback.from_user
    full_name = user.full_name

    if ru_month is None:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü")
        return

    data = await state.get_data()
    salary_data = data.get("salary")

    if isinstance(salary_data, BaseSalary):
        salary = salary_data
    else:
        salary = BaseSalary.from_dict(salary_data)

    salary.month = ru_month
    await state.update_data(salary=salary.to_dict())

    await callback.answer(f"–í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü: {ru_month.capitalize()}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(SalaryInput.sum_days)

    # –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–º–µ–Ω
    try:
        await callback.message.answer(
                "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω:",
                reply_markup=get_back_finish_kb(),
        )
        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –≤—Å–µ–≥–æ —Å–º–µ–Ω {callback.message.text} ({full_name})")
    except ValueError as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω {callback.message.text} - {e} - ({full_name})"
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω
@router.message(StateFilter(SalaryInput.sum_days), F.text)
async def input_sum_days(message: Message, state: FSMContext):
    data = await state.get_data()
    salary = restore_salary(await state.get_data())
    user = message.from_user
    full_name = user.full_name
    try:
        salary.sum_days = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.night_shifts)
        await message.answer(
                "üåô –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω.\n" "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ—Ç:",
                reply_markup=get_back_finish_kb(),
        )
        logger.info(
                f"–í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω {message.text} ({full_name})"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω {message.text} - {e} - ({full_name})"
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–º–µ–Ω
@router.message(StateFilter(SalaryInput.night_shifts), F.text)
async def input_night_shifts(message: Message, state: FSMContext):
    data = await state.get_data()
    salary = restore_salary(await state.get_data())
    user = message.from_user
    full_name = user.full_name
    try:
        salary.night_shifts = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.evening_shifts)
        await message.answer(
                "üïï –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–º–µ–Ω.\n" "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ—Ç:",
                reply_markup=get_back_finish_kb(),
        )
        logger.info(
                f"–í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–º–µ–Ω {message.text} ({full_name})"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–º–µ–Ω {message.text} - {e} - ({full_name})"
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
@router.message(StateFilter(SalaryInput.evening_shifts), F.text)
async def input_evening_shifts(message: Message, state: FSMContext):
    data = await state.get_data()
    salary = restore_salary(await state.get_data())
    user = message.from_user
    full_name = user.full_name
    try:
        salary.evening_shifts = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.temperature_work)
        await message.answer(
                "üå°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ —Å–≤—ã—à–µ +26 –≥—Ä–∞–¥—É—Å–æ–≤.\n"
                "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ—Ç:",
                reply_markup=get_back_finish_kb(),
        )
        logger.info(
                f"–í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ {message.text} ({full_name})"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–º–µ–Ω —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ {message.text} - {e} ({full_name}) "
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–∞–ª–æ–≥–æ–≤–æ–º—É –≤—ã—á–µ—Ç—É
@router.message(StateFilter(SalaryInput.temperature_work), F.text)
async def input_temperature_work(message: Message, state: FSMContext):
    data = await state.get_data()
    salary = restore_salary(await state.get_data())
    user = message.from_user
    full_name = user.full_name
    try:
        salary.temperature_work = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.children)
        await message.answer(
                "üë®‚Äçüëß‚Äçüë¶ –í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–µ–π –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ù–µ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ: 0\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:\n"
                "–Ω–∞ 1-–≥–æ –∏ 2-–≥–æ: *1,2*\n"
                "–Ω–∞ 2-–≥–æ –∏ 3-–≥–æ: *2,3*, –∏ —Ç.–¥.",
                reply_markup=get_back_finish_kb(), parse_mode="Markdown"
        )
        logger.info(
                f"–í–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –Ω–∞ –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç {message.text} ({full_name})"
        )
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π {message.text} - {e} - ({full_name}) "
        )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∞–ª–∏–º–µ–Ω—Ç–∞–º
@router.message(StateFilter(SalaryInput.children), F.text)
async def input_children(message: Message, state: FSMContext):
    data = await state.get_data()
    salary = restore_salary(await state.get_data())
    user = message.from_user
    full_name = user.full_name
    try:
        salary.children = message.text
        await state.update_data(salary=salary)
        await state.set_state(SalaryInput.alimony)
        await message.answer(
                "üë®‚Äçüë©‚Äçüëß‚Äçüëß–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –∞–ª–∏–º–µ–Ω—Ç–∞–º.\n"
                "–ù–µ—Ç –∞–ª–∏–º–µ–Ω—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ: 0\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:\n"
                "–û—Ç –æ–¥–Ω–æ–≥–æ –±—Ä–∞–∫–∞ –∏ –æ–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫: *25*\n"
                "–û—Ç –æ–¥–Ω–æ–≥–æ –±—Ä–∞–∫–∞ –∏ –¥–≤–∞ —Ä–µ–±–µ–Ω–∫–∞: *33*\n"
                "–û—Ç –æ–¥–Ω–æ–≥–æ –±—Ä–∞–∫–∞ –∏ —Ç—Ä–∏ —Ä–µ–±–µ–Ω–∫–∞ –∏ –±–æ–ª–µ–µ: *50*\n"
                "–û—Ç —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞–∫–æ–≤: *25,25* –∏–ª–∏ *25,16* –∏–ª–∏ *33,25* –∏ —Ç.–ø.",
                reply_markup=get_back_finish_kb(), parse_mode="Markdown"
        )
        logger.info(f"–í–≤–µ–¥–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –∞–ª–∏–º–µ–Ω—Ç–∞–º {message.text} ({full_name})")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        logger.error(
                f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∞–ª–∏–º–µ–Ω—Ç–æ–≤ ({message.text}) - {e} - ({full_name})"
        )


# –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
@router.message(StateFilter(SalaryInput.alimony), F.text)
async def input_alimony(message: Message, state: FSMContext):
    data = await state.get_data()
    salary = restore_salary(await state.get_data())
    user = message.from_user
    full_name = user.full_name

    try:
        salary.alimony = message.text
        await state.update_data(salary=salary)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ GetDataSalary
        get_salary = GetDataSalary.from_base_salary(salary)

        # –ù–∞—á–∏—Å–ª–µ–Ω–æ
        calc = CalculationBaseSalary(get_salary)

        result_answer = await calc.calculation_answer()
        result_base_month = await calc.calculation_base_month()
        result_month_quarter = await calc.month_quarter_payment_calculation()

        await message.answer(
                f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: *{result_answer} ‚ÇΩ*\n"
                f"üëÜ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –í–∞–º –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—á–µ–Ω–æ: *{result_base_month} ‚ÇΩ*\n"
                f"–≤ {result_month_quarter}.", parse_mode="Markdown"
        )
        await message.answer(
                f"–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—á–µ—Ç—É?\n",
                reply_markup=show_full_result_kb,
        )

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await state.set_state(SalaryInput.show_full_result)

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(
        StateFilter(SalaryInput.show_full_result), F.data == "show_full_result"
)
async def show_full_result_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)  # üî• –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

    data = await state.get_data()
    salary = restore_salary(await state.get_data())

    get_salary = GetDataSalary.from_base_salary(salary)

    calc = CalculationBaseSalary(get_salary)

    result_base_salary = await calc.calculation_base_salary()
    result_night_shifts = await calc.calculation_night_shifts()
    result_bonus = await calc.calculation_bonus()
    result_underground = await calc.calculation_underground()
    result_in_temperature = await calc.calculation_working_in_temperature()
    result_district_allowance = await calc.calculation_district_allowance()
    result_north_allowance = await calc.calculation_north_allowance()
    result_total_accruals = await calc.calculation_total_accruals()
    result_deduction_for_children = await calc.calculation_deduction_for_children()
    result_withholding_tax = await calc.calculation_withholding_tax()
    result_alimony = await calc.calculation_alimony()
    result_answer = await calc.calculation_answer()
    result_base_month = await calc.calculation_base_month()
    result_month_quarter = await calc.month_quarter_payment_calculation()

    await callback.message.answer("–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å—á—ë—Ç...")
    await callback.message.answer(
            f"–ù–ê–ß–ò–°–õ–ï–ù–û:\n"
            f"–û–∫–ª–∞–¥ –∑–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: *{result_base_salary} ‚ÇΩ*\n"
            f"–î–æ–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–±–æ—Ç—É –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: *{result_night_shifts} ‚ÇΩ*\n"
            f"–ü—Ä–µ–º–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è: *{result_bonus} ‚ÇΩ*\n"
            f"–ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –≤—Ä–µ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞: *{result_underground} ‚ÇΩ*\n"
            f"–î–æ–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–±–æ—Ç—É –≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ —Å–≤—ã—à–µ +26–°: *{result_in_temperature} ‚ÇΩ*\n"
            f"–†–∞–π–æ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: *{result_district_allowance} ‚ÇΩ*\n"
            f"–°–µ–≤–µ—Ä–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞: *{result_north_allowance} ‚ÇΩ*\n"
            f"–ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π: *{result_deduction_for_children} ‚ÇΩ*\n\n"
            f"‚úÖ –ò–¢–û–ì–û –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø: *{result_total_accruals} ‚ÇΩ*\n", parse_mode="Markdown"
    )
    await callback.message.answer(
            f"–£–î–ï–†–ñ–ê–ù–û:\n"
            f"–ù–∞–ª–æ–≥ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π (–ù–î–§–õ): *{result_withholding_tax} ‚ÇΩ*\n"
            f"–ê–ª–∏–º–µ–Ω—Ç—ã: *{result_alimony} ‚ÇΩ*\n"
            f"‚úÖ –ò–¢–û–ì–û –ö –í–´–ü–õ–ê–¢–ï: *{result_answer} ‚ÇΩ*\n"
            f"üëÜ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –í–∞–º –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—á–µ–Ω–æ: *{result_base_month} ‚ÇΩ*\n"
            f"–≤ *{result_month_quarter}.*", parse_mode="Markdown"
    )

    await callback.answer()
    await state.clear()


@router.callback_query(F.data == "go_back")
async def go_back_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)

    current_state_str = await state.get_state()
    current_state = getattr(SalaryInput, current_state_str.split(":")[-1], None)

    if current_state is None:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
        await callback.answer()
        return

    previous_state = get_previous_state(current_state)

    if previous_state:
        await prompt_for_state(callback.message, state, previous_state)
    else:
        await callback.message.answer("üîô –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.")

    await callback.answer()
